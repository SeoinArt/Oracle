-- day07_DDL.SQL

DDL : CREATE, ALTER, DROP, TRRNCATE, RENAME

-------------------------------------------------------------------------------- # 테이블 생성 - 제약조건
 <1> COLUMS 제약
 <2> TABLE 제약
-------------------------------------------------------- [1] PRIMARY KEY 제약조건
-- <1> COLUMS 수준에서의 제약     
CREATE TABLE TEST_TAB1 (
    ID NUMBER(2) CONSTRAINT TEST_TABLE_ID_PK PRIMARY KEY, 
    -- 컬럼명 자료유형 CONSTAINT 제약조건명 제약조건 유형
    NAME VARCHAR2(20),
    TEL CHAR(15)
);

DESC TEST_TAB1;

INSERT INTO TEST_TAB1 VALUES(1, '홍길동', NULL);

SELECT * FROM test_tab1;

-------------------------------------------------------- DD.DATA DICTIONARY 검색
SELECT * 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME ='TEST_TAB1';


-- <2> TABLE 수준에서의 제약 

CREATE TABLE TEST_TAB2(
    ID NUMBER(2),
    NAME VARCHAR2(20),
    TEL CHAR(15),
    CONSTRAINT TEST_TAB2_ID_PK PRIMARY KEY (ID) -- 제약조건 기술
);

--DD.DATA DICTIONARY 검색
SELECT * 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME ='TEST_TAB2';

--제약조건 이름 제거
-- <1>
CREATE TABLE TEST_TAB3(
    ID NUMBER(2) PRIMARY KEY,
    NAME VARCHAR2(20)
);
-- <2>
CREATE TABLE TEST_TAB4(
    ID NUMBER(2), 
    NAME VARCHAR2(20),
    PRIMARY KEY(ID)
);
-- DD.DATA DICTIONARY 검색
-- <1>
SELECT * 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME ='TEST_TAB3';
-- <2>
SELECT * 
FROM USER_CONSTRAINTS
WHERE TABLE_NAME ='TEST_TAB4';


[2] FOREIGN KEY 제약조건
-- <1> MASTER TABLE
CREATE TABLE DEPT_TAB(
    DEPTNO NUMBER(2),
    DNAME CHAR(20),
    LOC CHAR(15),
    CONSTRAINT DEPT_TAB_DEPTNO_PK PRIMARY KEY (DEPTNO)
);

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'DEPT_TAB';

-- <2> DETAIL TABLE
CREATE TABLE EMP_TAB(
    EMPNO NUMBER(4) CONSTRAINT EMP_TAB_EMPNO_PK PRIMARY KEY,
    ENAME VARCHAR(20),
    JOB VARCHAR(10),
    -- 컬럼 수준의 제약
    MGR NUMBER(4) CONSTRAINT EMP_TAB_MGR_FK REFERENCES EMP_TAB(EMPNO), 
    HIREDATE DATE,
    SAL NUMBER(7,2),
    COMM NUMBER(7,2),
    DEPTNO NUMBER(2),
    -- 테이블 수준의 제약
    CONSTRAINT EMP_TAB_DEPTNO_FK FOREIGN KEY(DEPTNO) REFERENCES DEPT_TAB (DEPTNO)
);

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'EMP_TAB';

-- <3> ON DELETE CASCADE OPTION

-- 부모 테이블
CREATE TABLE BOARD(
    NUM NUMBER(4) PRIMARY KEY,
    TITLE VARCHAR2(100) NOT NULL,
    CONTENT VARCHAR2(1000),
    WDATE DATE DEFAULT SYSDATE
);

-- 자식 테이블

CREATE TABLE REPLY(
    RNUM NUMBER(4) PRIMARY KEY,
    RCONTENT VARCHAR2(1000),
    RWDATE DATE DEFAULT SYSDATE,
    NUM_FK  NUMBER(4) CONSTRAINT REPLY_FK REFERENCES BOARD(NUM) ON DELETE CASCADE
);
-- => ON DELETE CASCADE OPTION을 주면 자식 레코드가 있어도 부모의 레코드를 삭제할 수 있으며 자식 레코드도 같이 삭제된다.

INSERT INTO BOARD(NUM,TITLE,CONTENT) VALUES(1,'첫 글입니다', '안녕하세요');
INSERT INTO BOARD(NUM,TITLE,CONTENT) VALUES(2,'두번째 글입니다', '반값습니다');

COMMIT;
SELECT * FROM BOARD;



-- 1번 글에 대한 댓글 2개 , 2번 글에 대한 댓글 1개
INSERT INTO REPLY VALUES(1,'첫번째 댓글입니다',SYSDATE,1);
INSERT INTO REPLY VALUES(2,'두번째 댓글입니다',SYSDATE,1);
INSERT INTO REPLY VALUES(3,' 두번째 글의 첫번째 댓글입니다', SYSDATE, 2);
SELECT * FROM REPLY;


-- BOARD 와 REPLY JOIN

SELECT B.*, R.RCONTENT,R. RWDATE, R.NUM_FK
FROM BOARD B LEFT OUTER JOIN REPLY R
    ON B.NUM = R.NUM_FK;
    
-- BOARD 테이블에서 1번 게시글을 삭제하세요
DELETE FROM BOARD WHERE NUM = 1;
SELECT * FROM REPLY;

--------------------------------------------------------------------------------
-- [3] UNIQUE KEY

-- <1> 컬럼 수준 제약
-- ASD

CREATE TABLE UNI_TAB1(
    NO NUMBER(2) PRIMARY KEY,
    NAME VARCHAR2(20) NOT NULL,
    USERID VARCHAR2(16) CONSTRAINT UNI_TAB1_USERTID_UK UNIQUE,
    TEL CHAR(15)
);

SELECT * FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'UNI_TAB1';

INSERT INTO UNI_TAB1 VALUES(1,'홍길동','HONG',NULL);
INSERT INTO UNI_TAB1 VALUES(2,'홍영희','HONG2',NULL);
INSERT INTO UNI_TAB1 VALUES(3,'최길동',NULL,NULL);
INSERT INTO UNI_TAB1 VALUES(4,'이길동',NULL,NULL);

COMMIT;

<2> 테이블 수준의 제약
CREATE TABLE UNI_TAB2(
    NO NUMBER(4) PRIMARY KEY,
    NAME VARCHAR2(20) NOT NULL,
    USERID VARCHAR2(16),
    TEL CHAR(15),
    CONSTRAINT UNI_TAB2_USERID_UK UNIQUE(USERID)
);


--------------------------------------------------------------------------------
-- [4] NOT NULL : 컬럼 수준에서만 제약 가능 --
--------------------------------------------------------------------------------

create TABLE NN_TAB(
    DEPTNO NUMBER(2) PRIMARY KEY, -- PRIMARY KEY = UNIQE + NOT NULL -- 
    DNAME VARCHAR2(20) CONSTRAINT NN_TAB_DNAME_NN NOT NULL,
    LOC VARCHAR2(30) NOT NULL
);

-- DD 검색 --
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'NN_TAB'; 

INSERT INTO NN_TAB VALUES(10,'ACCOUNTING','NEW YORK');
COMMIT;

SELECT * FROM NN_TAB;

--------------------------------------------------------------------------------
-- [5] CHECK : 사용자 제약조건 -- 
--------------------------------------------------------------------------------

-- <1> 컬럼 수준의 제약 -- 
CREATE TABLE CK_TAB1(
    DEPTNO NUMBER(2) CONSTRAINTS CK_TAB1_DEPTNO_CK CHECK (DEPTNO>0 AND DEPTNO <21),
    DNAME CHAR(20),
    LOC CHAR(20)
);

COMMIT;

INSERT INTO CK_TAB1 VALUES(1,'ACCOUNTING','LA');

-- <2> 테이블 수준의 제약 --
-- DEPTNO값은 10,20,30,40 값만 갖도록 CHECK제약조건을 테이블 수준에서 주세요 --
CREATE TABLE CK_TAB2 (
    DEPTNO NUMBER(2),
    DNAME CHAR(20),
    LOC CHAR(20),
    CONSTRAINTS CK_TAB2_DEPTNO_CK CHECK(DEPTNO IN (10,20,30,40))  
);

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'CK_TAB2';

INSERT INTO CK_TAB2 VALUES(41,'SALES','SEOUL');

SELECT * FROM ck_tab2;



-- <3> 생성 후 제약조건 추가 삽입 => [1] 제약조건 추가 -- 

ALTER TABLE TABLE_NAME ADD CONSTRAINT 제약조건명 제약조건 유형(컬럼명);

CREATE TABLE USER_TAB (
    ID NUMBER(4),
    NAME VARCHAR2(20),
    TEL VARCHAR2(15)
);
DESC user_tab;

SELECT * FROM USER_CONSTRAINTS 
WHERE TABLE_NAME = 'USER_TAB';

-- Q. USER_TAB에 ID 컬럼에 PRIMARY KEY 제약조건을 추가하세요 --

ALTER TABLE USER_TAB 
ADD CONSTRAINT USER_TAB_ID_PK PRIMARY KEY (ID);


[2] 제약조건 이름 변경 
=> USER_TAB_ID_PK 이름을을 USER_TAB_PK로 변경하세요
ALTER TABLE USER_TAB 
RENAME CONSTRAINT USER_TAB_ID_PK 
    TO USER_TAB_PK;
    
    
[3] 제약조건 삭제 : ALTER TABLE 테이블명 DROP CONSTRAINT 제약조건명;
=> Q. USER_TAB에 PRIMARY KEY 제약조건을 삭제하세요
ALTER TABLE USER_TAB 
DROP CONSTRAINT USER_TAB_PK;

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'USER_TAB';


--------------------------------------------------------------------------------
# 컬럼 추가 /변경 / 삭제
- ALTER TABLE 테이블명 ADD (추가할 컬럼 정보 [default expr])
- ALTER TABLE 테이블명 MODIFY (변경할 컬럼 정보 [default expr])
- ALTER TABLE 테이블명 DROP (column 삭제할 컬럼명)
- ALTER TABLE 테이블명 RENAME COLUMN OLD컬럼명 TO NEW컬럼명

CREATE TABLE BOARD_TAB(
    NO NUMBER
);
DESC board_tab;


=> [1] BOARD_TAB에 TITLE VARCHAR2(100) NOT NULL 컬럼 추가하기
ALTER TABLE BOARD_TAB ADD TITLE VARCHAR2(100) NOT NULL;

DESC BOARD_TAB;

=> [2] BOARD_TAB에 NAME VARCHAR2(20) 컬럼을 추가하세요
ALTER TABLE BOARD_TAB ADD NAME VARCHAR2(20);

DESC BOARD_TAB;

=> [3] NO 컬럼명을 NUM으로 수정하세요
ALTER TABLE BOARD_TAB RENAME COLUMN NO TO NUM;

DESC BOARD_TAB;

=> [4] NUM의 컬럼 자료형을 CHAR(1)으로 수정하세요
ALTER TABLE BOARD_TAB MODIFY NUM CHAR(1);

DESC BOARD_TAB;

=> [5] NAME컬럼을 삭제하세요
ALTER TABLE BOARD_TAB DROP COLUMN NAME;

DESC BOARD_TAB;


--------------------------------------------------------------------------------
# 테이블 이름 변경 => 객체 이름 변경
    RENAME OLD_NAME TO NEW_NAME;


Q. BOARD_TAB 테이블 이름을 BBS_TAB으로 변경하세요
RENAME BOARD_TAB TO BBS_TAB;
DESC BOARD_TAB; 
DESC BBS_TAB;

SELECT* FROM TAB;
SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE = 'TABLE' ORDER BY OBJECT_NAME;



# 테이블 삭제 
    DROP TABLE 테이블명 [CASCADE CONSTRAINT]; 
    DROP TABLE 테이블명 PURGE : 쓰레기값도 같이 삭제;

Q. BBS_TAB을 삭제하세요
DROP TABLE BBS_TAB CASCADE CONSTRAINT;


# 테이블 구조만 남기고 데이터 일괄 삭제 
: 데이블 구조만 남기고 데이터가 모두 삭제된다
: DDL 문장이므로 ROLLBACK [X]
: DELETE와 유사 (데이터 양이 많을 경우 속도차이 존재)
: TRUNCATE TABLE 테이블명; 

SELECT* FROM EMP2;
COMMIT;
ROLLBACK;

DELETE FROM EMP2;
TRUNCATE TABLE EMP2; 




CREATE TABLE ZIPCODE(
    POST1 CHAR(3),
    POST2 CHAR(3),
    ADDR VARCHAR2(60) CONSTRAINT ZIPCODE_ADDR_NN NOT NULL,
    CONSTRAINT ZIPCODE_POST1_POST2_PK PRIMARY KEY(POST1,POST2)
);


CREATE TABLE MEMBER_TAB(
    ID NUMBER(4,0) CONSTRAINT MEMBER_TAB_PK PRIMARY KEY,
    NAME VARCHAR2(10),
    GENDER CHAR(1) CONSTRAINT MEMBER_TAB_CH CHECK(GENDER IN ('M','F')),
    JUMIN1 CHAR(6),
    JUMIN2 CHAR(7),
    TEL VARCHAR2(15),
    POST1 CHAR(3),
    POST2 CHAR(3),
    ADDR VARCHAR2(60),
    CONSTRAINT EMMBER_TAB_JUMIN_NN UNIQUE(JUMIN1, JUMIN2),
    CONSTRAINT MEMBER_TAB_POST1_FK FOREIGN KEY (POST1,POST2) REFERENCES ZIPCODE(POST1,POST2)
);





   